package niewei.test4;

import java.util.LinkedHashMap;
import java.util.Collection;  
import java.util.Map;  
import java.util.ArrayList;  
  
public class LRUCache<K,V> {  
  
private static final float   hashTableLoadFactor = 0.75f;  
  
private LinkedHashMap<K,V>   map;  
private int                  cacheSize;  
  

public LRUCache (int cacheSize) {  
   this.cacheSize = cacheSize;  
   int hashTableCapacity = (int)Math.ceil(cacheSize / hashTableLoadFactor) + 1;  
   map = new LinkedHashMap<K,V>(hashTableCapacity, hashTableLoadFactor, true) {  
      // (an anonymous inner class)  
      private static final long serialVersionUID = 1;  
      @Override protected boolean removeEldestEntry (Map.Entry<K,V> eldest) {  
         return size() > LRUCache.this.cacheSize; }}; }  
  

public synchronized V get (K key) {  
   return map.get(key); }  
  

public synchronized void put (K key, V value) {  
   map.put (key, value); }  
  
 
public synchronized void clear() {  
   map.clear(); }  
  

public synchronized int usedEntries() {  
   return map.size(); }  
  

public synchronized Collection<Map.Entry<K,V>> getAll() {  
   return new ArrayList<Map.Entry<K,V>>(map.entrySet()); 
   }  
  


public static void main (String[] args) {  
   LRUCache<String,String> list = new LRUCache<String, String>(10);  
 
   list.put ("1", "one");                           // 1  
   list.put ("2", "two");                           // 2 1  
   list.put ("3", "three");                         // 3 2 1  
   list.put ("4", "four");                          // 4 3 2 1 
   list.put ("5", "five");                          // 5 4 3 2 1
   list.put ("6", "six");                           // 6 5 4 3 2 1
   list.put ("7", "seven");                         // 7 6 5 4 3 2 1
   list.put ("8", "eight");                         // 8 7 6 5 4 3 2 1
   list.put ("9", "nine");                          // 9 8 7 6 5 4 3 2 1
   list.put ("10", "ten");                          // 10 9 8 7 6 5 4 3 2 1 
   list.put ("11", "eleven");                       // 11 10 9 8 7 6 5 4 3 2
   

   for (Map.Entry<String, String> e : list.getAll())  
      System.out.println (e.getKey() + " : " + e.getValue()); 
  }
}
